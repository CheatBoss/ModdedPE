#pragma once

#include <string>

class ClientInstance;
class VoiceCommand;
class FocusImpact;
class Side;
class HoloUIInputMode;
class PointerLocationEventData;
class BuildActionIntention;
class InputMode;
class DirectionId;

class ClientInputCallbacks
{
public:
	ClientInputCallbacks();
	void handleBuildAction(ClientInstance&, BuildActionIntention&);
	void handlePointerLocation(ClientInstance&, PointerLocationEventData const&, FocusImpact);
	void vibrate(ClientInstance&, int);
	void handleInventoryButtonPress(ClientInstance&);
	void handleTextChar(ClientInstance&, std::string const&, bool, FocusImpact);
	void handleDirection(ClientInstance&, DirectionId, float, float, FocusImpact);
	void handleVectorInput(ClientInstance&, short, float, float, float, FocusImpact);
	void handleCommandEvent(ClientInstance&, VoiceCommand const&);
	void handleCaretLocation(ClientInstance&, int, FocusImpact);
	void handleDictationEvent(ClientInstance&);
	void handleDropButtonPress(ClientInstance&);
	void handleMenuButtonPress(ClientInstance&, short, FocusImpact);
	void handleToggleUIProfile(ClientInstance&);
	void handleInputModeChanged(ClientInstance&, InputMode);
	void handlePauseButtonPress(ClientInstance&);
	void handleChatButtonRelease(ClientInstance&);
	void handleMenuButtonRelease(ClientInstance&, short, FocusImpact);
	void handlePaddleButtonPress(ClientInstance&, Side);
	void handleDropAllButtonPress(ClientInstance&);
	void handleCraftingButtonPress(ClientInstance&);
	void handleDismountButtonPress(ClientInstance&);
	void handleInteractButtonPress(ClientInstance&);
	void handlePaddleButtonRelease(ClientInstance&, Side);
	void handleReloadResourcePacks(ClientInstance&);
	void handleReloadUIDefinitions(ClientInstance&);
	void handleUIScalingRuleChange(ClientInstance&);
	void handleConsoleButtonRelease(ClientInstance&);
	void handleHoloInputModeChanged(ClientInstance&, HoloUIInputMode);
	void handleDebugToggleLSRCommand(ClientInstance&);
	void handleMobEffectsButtonPress(ClientInstance&);
	void handleSetGazeControllerMode(ClientInstance&);
	void handleSlotSelectButtonPress(ClientInstance&, int);
	void handleMemoryStatsButtonPress(ClientInstance&);
	void handleNextAVCStatButtonPress(ClientInstance&);
	void handleRenderDebugButtonPress(ClientInstance&);
	void handleStickCursorButtonPress(ClientInstance&);
	void handleBiomeDisplayButtonPress(ClientInstance&);
	void handleDropAllItemsButtonPress(ClientInstance&);
	void handleToggleNoClipButtonPress(ClientInstance&);
	void handleBuildActionButtonRelease(ClientInstance&);
	void handleBuildOrAttackButtonPress(ClientInstance&);
	void handleDebugTexturesButtonPress(ClientInstance&);
	void handleInventoryMoveButtonPress(ClientInstance&, int);
	void handleNextAVCStatButtonRelease(ClientInstance&);
	void handleStickCursorButtonRelease(ClientInstance&);
	void handleSuspendResumeButtonPress(ClientInstance&);
	void handleToggleTexelAAButtonPress(ClientInstance&);
	void handleAttackActionButtonRelease(ClientInstance&);
	void handleDebugToggleAnchorsCommand(ClientInstance&);
	void handlePointerPressedButtonPress(ClientInstance&);
	void handleToggleFlyFlastButtonPress(ClientInstance&);
	void handleToggleGameModeButtonPress(ClientInstance&);
	void handleBuildOrInteractButtonPress(ClientInstance&);
	void handleDestoryOrAttackButtonPress(ClientInstance&);
	void handlePickDebugObjectButtonPress(ClientInstance&);
	void handleTimeStepForwardButtonPress(ClientInstance&);
	void handleToastInteractButtonRelease(ClientInstance&);
	void handleLowMemoryWarningButtonPress(ClientInstance&);
	void handlePointerPressedButtonRelease(ClientInstance&);
	void handleSetSpawnPositionButtonPress(ClientInstance&);
	void handleDebugRenderChunksButtonPress(ClientInstance&);
	void handleDestroyOrInteractButtonPress(ClientInstance&);
	void handleDebugWorkerThreadsButtonPress(ClientInstance&);
	void handleToggleLivingroomButtonRelease(ClientInstance&);
	void handleToggleShowChunkMapButtonPress(ClientInstance&);
	void handleToggleSimulateTouchButtonPress(ClientInstance&);
	void handlePointerLocationWithGazeOverride(ClientInstance&);
	void handleToggleDayCycleActiveButtonPress(ClientInstance&);
	void handleCreativeBlockSelectButtonRelease(ClientInstance&);
	void handleToggleThirdPersonViewButtonPress(ClientInstance&);
	void handleDecreaseRenderDistanceButtonPress(ClientInstance&);
	void handleIncreaseRenderDistanceButtonPress(ClientInstance&);
	void handleToggleChatTextToSpeechButtonPress(ClientInstance&);
	void handleTogglePlayerUpdateMobsButtonPress(ClientInstance&);
	void handleToggleFrameTimerDisplayButtonPress(ClientInstance&);
	void handleDecrementMaxCullingStepsButtonPress(ClientInstance&);
	void handleIncrementMaxCullingStepsButtonPress(ClientInstance&);
	void handleToggleEnableNewScreensDebugButtonPress(ClientInstance&);
	void handleCreativeBlockSelectButtonReleaseWithData(ClientInstance&);
	void handleShowUpsellScreen(ClientInstance&, bool);
};
